"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _excluded = ["className", "size"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var iconSize = Object.freeze({
  lg: 'w-3.5 h-3.5',
  md: 'w-3 h-3',
  sm: 'w-2.5, h-2.5'
});

var AddPin = function AddPin(_ref) {
  var className = _ref.className,
      size = _ref.size,
      props = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/_react["default"].createElement("svg", _extends({
    className: "".concat(iconSize[size], " ").concat(className),
    viewBox: "0 0 140 140",
    xmlns: "http://www.w3.org/2000/svg",
    fill: "currentColor",
    stroke: "currentColor"
  }, props), /*#__PURE__*/_react["default"].createElement("g", {
    transform: "matrix(9.5,0,0,9.5,0,0)"
  }, /*#__PURE__*/_react["default"].createElement("path", {
    d: "M6.49999 1.52723e-06C5.1469 -0.000968576 3.83407 0.460249 2.77889 1.30728C1.72371 2.1543 0.989496 3.33633 0.697823 4.65761C0.406149 5.97889 0.574518 7.36016 1.17505 8.57268C1.77558 9.78521 2.77224 10.7563 3.99999 11.325C4.33659 11.4806 4.60686 11.7509 4.76249 12.0875L5.93124 14.6375C5.98096 14.7466 6.06101 14.8391 6.16186 14.904C6.2627 14.9689 6.38008 15.0034 6.49999 15.0034C6.6199 15.0034 6.73728 14.9689 6.83813 14.904C6.93897 14.8391 7.01903 14.7466 7.06874 14.6375L8.23749 12.0875C8.39312 11.7509 8.66339 11.4806 8.99999 11.325C10.2277 10.7563 11.2244 9.78521 11.8249 8.57268C12.4255 7.36016 12.5938 5.97889 12.3022 4.65761C12.0105 3.33633 11.2763 2.1543 10.2211 1.30728C9.16592 0.460249 7.85308 -0.000968576 6.49999 1.52723e-06ZM6.49999 9.6875C5.75831 9.6875 5.03329 9.46757 4.4166 9.05551C3.79992 8.64346 3.31927 8.05779 3.03544 7.37257C2.75161 6.68734 2.67735 5.93334 2.82205 5.20591C2.96674 4.47848 3.32389 3.8103 3.84834 3.28585C4.37279 2.7614 5.04097 2.40425 5.7684 2.25956C6.49583 2.11486 7.24983 2.18912 7.93506 2.47295C8.62028 2.75678 9.20595 3.23743 9.618 3.85411C10.0301 4.4708 10.25 5.19582 10.25 5.9375C10.25 6.93206 9.85491 7.88589 9.15164 8.58915C8.44838 9.29241 7.49455 9.6875 6.49999 9.6875Z",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: "0"
  }), /*#__PURE__*/_react["default"].createElement("path", {
    d: "M8.0625 5.15625H7.4375C7.39606 5.15625 7.35632 5.13979 7.32701 5.11049C7.29771 5.08118 7.28125 5.04144 7.28125 5V4.375C7.28125 4.1678 7.19894 3.96909 7.05243 3.82257C6.90591 3.67606 6.7072 3.59375 6.5 3.59375C6.2928 3.59375 6.09409 3.67606 5.94757 3.82257C5.80106 3.96909 5.71875 4.1678 5.71875 4.375V5C5.71875 5.04144 5.70229 5.08118 5.67299 5.11049C5.64368 5.13979 5.60394 5.15625 5.5625 5.15625H4.9375C4.7303 5.15625 4.53159 5.23856 4.38507 5.38507C4.23856 5.53159 4.15625 5.7303 4.15625 5.9375C4.15625 6.1447 4.23856 6.34341 4.38507 6.48993C4.53159 6.63644 4.7303 6.71875 4.9375 6.71875H5.5625C5.60394 6.71875 5.64368 6.73521 5.67299 6.76451C5.70229 6.79382 5.71875 6.83356 5.71875 6.875V7.5C5.71875 7.7072 5.80106 7.90591 5.94757 8.05243C6.09409 8.19894 6.2928 8.28125 6.5 8.28125C6.7072 8.28125 6.90591 8.19894 7.05243 8.05243C7.19894 7.90591 7.28125 7.7072 7.28125 7.5V6.875C7.28125 6.83356 7.29771 6.79382 7.32701 6.76451C7.35632 6.73521 7.39606 6.71875 7.4375 6.71875H8.0625C8.2697 6.71875 8.46841 6.63644 8.61493 6.48993C8.76144 6.34341 8.84375 6.1447 8.84375 5.9375C8.84375 5.7303 8.76144 5.53159 8.61493 5.38507C8.46841 5.23856 8.2697 5.15625 8.0625 5.15625Z",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: "0"
  }), /*#__PURE__*/_react["default"].createElement("path", {
    d: "M111.856 0.781249C110.512 0.835302 109.214 1.28868 108.129 2.08351C107.044 2.87834 106.22 3.97856 105.763 5.24375C105.75 5.27718 105.726 5.30534 105.696 5.32353C105.665 5.34172 105.629 5.34886 105.594 5.34375L104.538 5.19375C104.479 5.18451 104.42 5.19193 104.365 5.21515C104.311 5.23838 104.265 5.27646 104.231 5.325C104.201 5.37491 104.185 5.43221 104.185 5.49062C104.185 5.54904 104.201 5.60634 104.231 5.65625L105.875 8.59375C105.901 8.63835 105.937 8.67595 105.98 8.70321C106.024 8.73046 106.074 8.74654 106.125 8.75C106.173 8.75867 106.222 8.7552 106.267 8.73991C106.313 8.72461 106.355 8.69799 106.388 8.6625L108.744 6.325C108.784 6.28362 108.812 6.23212 108.825 6.17599C108.839 6.11986 108.836 6.06119 108.819 6.00625C108.802 5.95038 108.77 5.90053 108.725 5.86279C108.681 5.82506 108.627 5.80107 108.569 5.79375L107.494 5.625C107.471 5.62172 107.448 5.61328 107.429 5.6003C107.409 5.58732 107.393 5.57013 107.381 5.55C107.37 5.52764 107.364 5.50305 107.364 5.47812C107.364 5.4532 107.37 5.4286 107.381 5.40625C107.779 4.52522 108.414 3.77221 109.216 3.23139C110.017 2.69056 110.953 2.38323 111.919 2.34375C112.807 2.3127 113.688 2.51173 114.477 2.92153C115.265 3.33132 115.934 3.93797 116.419 4.68263C116.904 5.42728 117.189 6.28466 117.245 7.17158C117.301 8.0585 117.127 8.94485 116.739 9.74465C116.352 10.5445 115.764 11.2305 115.034 11.7364C114.303 12.2422 113.454 12.5506 112.569 12.6316C111.684 12.7127 110.793 12.5636 109.983 12.1989C109.172 11.8341 108.47 11.2661 107.944 10.55C107.888 10.4564 107.813 10.3756 107.724 10.3128C107.635 10.2499 107.533 10.2064 107.426 10.1851C107.32 10.1637 107.209 10.165 107.103 10.1887C106.997 10.2125 106.896 10.2583 106.809 10.3232C106.721 10.388 106.648 10.4705 106.594 10.5653C106.54 10.6601 106.507 10.7651 106.496 10.8736C106.485 10.9821 106.497 11.0917 106.531 11.1952C106.565 11.2988 106.621 11.3941 106.694 11.475C107.38 12.4085 108.296 13.1486 109.353 13.6236C110.41 14.0985 111.571 14.2921 112.725 14.1856C113.879 14.0791 114.985 13.676 115.937 13.0155C116.889 12.3551 117.654 11.4597 118.158 10.4163C118.661 9.37291 118.887 8.217 118.812 7.06083C118.737 5.90465 118.364 4.7875 117.73 3.81785C117.096 2.84821 116.222 2.05903 115.193 1.52696C114.163 0.994888 113.014 0.738001 111.856 0.781249V0.781249Z",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: "0"
  })));
};

AddPin.propTypes = {
  className: _propTypes["default"].string,
  size: _propTypes["default"].string
};
AddPin.defaultProps = {
  className: '',
  size: ''
};
var _default = AddPin;
exports["default"] = _default;